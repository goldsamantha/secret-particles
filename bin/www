#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('particles:server');
var http = require('http');
// var server = http.createServer(app);
var server = http.Server(app);
var io = require('socket.io')(server);

var model = require('../model');



/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);


io.on('connection', function(socket){
  console.log('a user connected');
  socket.on('started', function(data){
      model.setOpenedAt(data.id, data.date);

      // Should modify here to send back the message as well
      // as the time stamp: if (time <0: return{ "Link Expired", 5s})
      var curr_date = +new Date;
      var message = "Link Expired";
      var timing = 5000 - (curr_date - model.getOpenedAt(data.id));
      if (timing >0){
        console.log("I passed timing and my time is: " + timing);
        message = model.getMessage(data.id);
      }
      socket.emit('date', {timing: timing, msg: message}); //data.date);
      console.log("date is: " + model.getOpenedAt(data.id)
      + "\ttiming: " + timing + "\tmessage: " + message);
  });
});



/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
